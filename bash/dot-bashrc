RED='\[\033[0;31m\]'
GREEN='\[\033[0;32m\]'
YELLOW='\[\033[0;33m\]'
BLUE='\[\033[0;34m\]'
RESET='\[\033[0m\]'


if [[ -n $virtme_user ]]; then
  export PS1="${RED}(virtme)${RESET} ${GREEN}\u${RESET}@${BLUE}\h${RESET} \w $ "
else
  export PS1="${GREEN}\u${RESET}@${BLUE}\h${RESET} \w $ "
fi

export EDITOR="nvim"

export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/usr/lib/pkgconfig"

test -s ~/.alias && . ~/.alias || true
test -s ~/.profile && . ~/.profile || true

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

export GPG_TTY=$(tty)

# set up deno
test -s ~/.deno/env && . ~/.deno/env || true

# set up emscripten sdk
export EMSDK_QUIET=1
test -s ~/Source/emsdk/emsdk_env.sh && . ~/Source/emsdk/emsdk_env.sh || true

# set up ocaml
eval $(opam env)

# setup rbenv
eval "$(rbenv init - --no-rehash bash)"

alias ls='ls --color=auto'
alias grep='grep --color=auto'

# initialize bash completions
if [ -f "/usr/share/bash-completion/completions/git" ]; then
  source /usr/share/bash-completion/completions/git
fi

source ~/.local/share/bash-completion/completions/deno.bash
source ~/.local/share/bash-completion/completions/poetry.bash

if [ -f "~/.local/share/bash-completion/completions/kiro.bash" ]; then
  source ~/.local/share/bash-completion/completions/kiro.bash
fi

# perl stuff
PERL5LIB="~/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="~/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"~/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=~/perl5"; export PERL_MM_OPT;


[[ "$TERM_PROGRAM" == "kiro" ]] && . "$(kiro --locate-shell-integration-path bash)"
